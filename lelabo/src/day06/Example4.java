package day06; // 폴더명

public class Example4 { // p s

	public static void main(String[] args) { // m s
		// [1] 클래스 정의하기 , 객체를 만들기 위한 일종의 틀 / 설계도 만들기
		// ==> 생활속에서의 틀/설계도가 필요한 이유?
		// ==? 붕어빵 가가에서 붕어빵을 구매 > 주인이 붕어빵을 수제 생성
        // ==? 모양이 일정치 않고, 오래걸림
		// ==> 붕어빵 모형의 주물을 사용하면 빠르고 일정한 모양으로 붕어빵을 만들 수 있다.
		// * 객체 설계도 클래스는 main 함수가 없어도 된다.
		// * 클래스 생성법 : class  클래스명{}
		
		
		// [2] 클래스 기반으로 객체 생성하기 및 메모리 할당하기 , 인스턴스
		// => 붕어빵 2개 주세요 >> 객체 2개 생성
		// * 객체 생성법 : new 클래스명(); , 클래스명 변수명 = new 클래스명();
		new 붕어빵주물();
		new 붕어빵주물();
		
		붕어빵주물 붕어빵1 = new 붕어빵주물(); // 붕어빵을 생성하고 변수에 담았다.
		붕어빵주물 붕어빵2 = new 붕어빵주물(); // 붕어빵을 생성하고 변수에 담았다.
		
		//[3] 객체 멤버의 접근하기 , 접근연산자 . 을 이용한 멤버변수를 사용한다.
		붕어빵1.내용물 = "슈크림";
		붕어빵2.내용물 = "팥";
		
		// 예제 [1] 클래스 정의하기 , 자동차
		// ㄴ 만들고자 하는 객체가 가질 수 있는 속성들을 구성하여 클래스를 코드로 작성한다. 
		
		// 예제 [2] 클래스 기반, 객체 생성하기
		// ㄴ new 클래스명(); , 클래스명 변수명 = new 클래스명();
		new Car(); // 객체 생성후 변수에 대입하지 않으면 사라진다.
		Car Car1 = new Car(); // 주로 객체 생성과 동시에 변수에 담으며, 변수타입은 객체의 클래스명으로 한다.
		Car Car2 = new Car();
		// 예제 [3] 객체의 멤버변수 접근하기
		Car1.차량주="붕어빵슈크림";
		Car2.차량주="슈크림붕어빵";	
	} // m e

} // p e
