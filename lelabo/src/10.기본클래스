[기본클래스]
	- java.lang패키지 : 기본적으로 많이 사용하는 클래스들이 포함되어 있는 폴더
	- import 문을 직접 쓰지 않아도 자동으로 추가되는 패키지 
	- Object, String , System , Integer 등등

[Object 클래스 ]
	1. 자바에서의 최상위 클래스
	2. 모든 클래스는 자동으로 extends Object 된다.
		-> 자바 100% 객체지향 구현, 다형성
	3. 주요 메소드 
		(1) .toString() : 인스턴스의 참조(주소) 값(16진수) 반환 함수
			- 주로 오버라이딩(재정의)해서 객체의 설명 변경한다.
		(2) .equals() : 두 인스턴스가 동일한지 여부를 반환 함수
			- 주로 String 타입 의 문자열 비교에서 사용된다.
			- 차이점
				1. == : 스택 메모리 값 비교  , 리터럴 값 비교 
				2. .equals() : 힙 메모리 값 비교 , 참조(주소)값 비교 
		(3) .hashCode() : 인스턴스의 해시 코드 값을 반환 함수.
			- 인스턴스의 주소값을 정수로 반환하는 함수.
			- 주로 객체가 저장된 위치를 검색할 때 사용되는 자료구조 입니다.
		
				
스택 메모리						힙 메모리
- 함수내 선언된 변수/지역변수		- 멤버변수 
- 기본타입의 리터럴 값 저장			- 참조타입의 값 저장 
int a = 3;
String str = 				new String("유재석");

[ Class 클래스 ]
	- * 우리가 코드를 작성하는 파일은 .java 라는 확장자 파일이다.*
		- .java파일 실행(컴파일/번역) 하면 .class 파일 생성된다.
			.java파일(src폴더) 
			.class파일(bin폴더)
	1. 클래스의 정보를 사용할 경우 사용하는 클래스 
	2. 주요 메소드 
		[ 타입들의 클래스 정보를 JVM으로 가져오는 방법 ]
		1. Class 변수명 = (인스턴스).getClass() : 인스턴스의 class 정보 반환 함수.
			- 주로 : 인스턴스의 타입을 확인할때 사용된다.
		2. Class 변수명 = 타입.class;	: 타입의 클래스 정보를 가져오는 함수.
		3. Class.forName("클래스이름") : 지정한 클래스 정보를 가져오는 함수.
			- 주로 : 외부 라이브러리( MYSQL Driver ) 클래스 가져올때 사용된다.
			- 일반예외 발생 하므로 예외처리 필수이다.
			- 동적 로딩 사용된다.
			
		[ 클래스의 정보 반환 함수들 ]
		1. .getFields() : 클래스가 갖는 모든 멤버변수 정보 반한 함수
		2. .getConstructors(); : 클래스가 갖는 모든 생성자 정보 반환 함수 
		3. .getMethods() : 클래스가 갖는 모든 메소드 정보 반환 함수.
			- import java.lang.reflect.Field;
		
		[ 리플렉션 ] : 클래스,인터페이스의 타입 정보를 찾아서 확인하는 방법
		[ 동적 로딩 ] : class 파일를 읽어 들여 class 인스턴스 를 생성하는 방법
		
 [ Wrapper 클래스 ]
      1. 기본 타입 자료들을 참조타입으로 변환
      2. 기본 타입은 기능/메소드 이 없다. 
      3. 종류
      
      4. 오토박싱 : 기본타입을 참조타입으로 변환 
        / 언박싱 : 참조타입을 기본타입으로 변환
         
      5. 타입변환
       * HTTP 웹통신 할때 주로 문자열로 통신 하므로 타입에 대한 *변환* 중요하다.
         (1) 문자열 타입 -- > 기본타입
            // 1. Integer.parseInt("문자열")
		 	// 2. Double.parseDouble("문자열")
			// 3. Float.parseFloat("문자열")
			// 4. Byte.parseByte("문자열")
			// 5. Short.parseShort("문자열")
			// 6. Long.parseLong("문자열")
			// 7. Boolean.parseBoolean("문자열")
             - 자료/값 | (타입/값분류) : "3.14"(문자열타입) 3.14(실수타입)
         
         (2) 기본타입 -- > 문자열 타입
             - [리터럴]자료 + "";
             - String.valueOf([리터럴]자료);
             
 [ String 클래스 ] 
 1. 자바에서 문자열을 다루는 타입 / 클랫 
 2. 방법
		[방법1] char[] 변수 = new char[]{ '유', '재', '석' };
		[방법2] String 변수 = "유재석";
		[방법3] String 변수 = new String("유재석");
	3. 주요 메소드
		[ 문자열을 연결하는 방법]
		1. "문자열".concat("문자열");	: 두 문자열 연결하여 반환 함수.
		2. StringBuilder 클래스 
			.append( "문자열" )		: 하나의 문자열에 연결해주는 함수.
		3. String.format( "형식문자" , 값 ); : 형식문자에 값이 대입된 문자열 반환 함수.
		4. String 변수명 = ""			: 문자열 변수에 += 연산자를 이용한 새로운 문자열 연결
			변수명 += "문자열"
		[ ]
		5. .charAt(인덱스)	: 문자열내 인덱스번째 문자 1개 반환 함수.
		6. .length()		: 문자열내 문자수 반환 함수
		7. .replace("기존문자열","새로운문자열")	
			: 기존문자열이 존재하면 새로운 문자열 로 치환/변경 새로운 문자열 반환 함수
			* 문자열은 불변성의 특징을 갖는다. - 수정이 불가능하다.[리터럴]
			1. 3+3=>6			: 새로운 6 
			2. "a"+"b" => "ab" 	: 새로운 "ab"           
       
		8. .subString( 시작인덱스 , [끝인덱스] );
			: 시작인덱스부터 끝인덱스 전까지 문자열 추출 함수.
		9. .split("구분문자")
			: 구분문자 기준으로 분해한 여러 문자열의 배열로 반환 함수
		10. .indexOf("찾을문자열")
			: 문자열내 찾을문자열이 존재하면 찾은 문자열은 인덱스 없으면 -1 반환 함수.
		11. .contains("찾을문자열")
			: 문자열내 찾을문자열이 존재하면 true 없으면 false 반한함수.
		12. .getBytes()
			: 문자열들을 문자 바이트의 배열로 반환 함수.
			
		[ 난수 문자 생성 ]
		1. new Random().nextInt();				: int 타입의 난수 생성 
		2. new Random().nextInt(수)				: 0 ~ 수 전까지 사이의 난수 생성
		3. new Random().nextInt(수)+시작값			: 시작값 ~  수 개수만큼 사이의 난수 생성 
			- new Random().nextInt(100);		: 0 ~ 100 난수 생성 
			- new Random().nextInt(10) + 10 	: 10 ~ 20 사이의 난수 생성
		4. (char)(new Random().nextInt(26)+97)	: 랜덤 소문자 1개 생성 		
				