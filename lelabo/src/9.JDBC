[ JDBC ]
	1. [J]JAVA [D]DATA [B]BASE [C]CONNECT : 자바 데이터베이스 연동 
		-> JAVA 와 DB서버를 연동하는 기술
	
	2. JDBC 라이브러리 준비
		-> 라이브러리 : 미리 만들어진 클래스/인터페이스 들  
		1. JDBC MYSQL 라이브러리 다운로드 
			1. https://dev.mysql.com/downloads/connector/j/
			2. [Select Operating System] Platform Independent
			3. Platform Independent (Architecture Independent), ZIP Archive 9.1.0	5.1M	[ 다운로드 ]
			4. [No thanks, just start my download.]
			5. 다운로드 후 --> [mysql-connector-j-9.1.0.zip] 압축풀기 
			6. 압축 푼 폴더내 [mysql-connector-j-9.1.0.jar] 파일 확인 , jar : java 라이브러리 확장자
		
		2. 내 프로젝트 MYSQL JDBC 라이브러리 등록 
			1. [mysql-connector-j-9.1.0.jar] 을 프로젝트 내 이동 , 프로젝트폴더 -> src폴더 -> database 폴더
			2. [mysql-connector-j-9.1.0.jar] 파일 오른쪽 클릭 --> [build path] --> [add to build path]
	
	3. DB 연동 코드 
		1. 연동할 JDBC 라이브러리 클래스 로드하기 , 일반예외 발생 
			Class.forName("com.mysql.cj.jdbc.Driver");
				- mySQL : com.mysql.cj.jdbc.Driver
				- oracle : oracle.jdbc.driver.OracleDriver
		2. 지정한 DB서버 와 계정정보가 일치 했을때 DB 연동 시도 하고 성공시 연동된 구현체를 반환한다.
			DriverManager.getConnection("jdbc:mysql://IP주소:PORT/DB명" , "계정명" , "비밀번호");
				- local : "jdbc:mysql://localhost:3306/db명" , "root" , "1234" 
			
			- 연동된 결과를 인터페이스에서 조작할수 있도록 하는 코드.
			Connection conn = DriverManager.getConnection()
				
	4. JDBC 핵심 인터페이스 
		* 인터페이스이란? 서로 다른 클래스들 간의 동일한 목적하의 서로 다른 기능 수행하는 타입 , *추상메소드
		1. Connection 인터페이스 : DB 서버와 연동 시도하고 연동 성공 결과를 반환
			예] 서로 다른 DB 회사에서 제공하는 클래스들을 하나의 타입(인터페이스)에서 인스턴스를 사용. p.343
			즉] 서로 다른 DB 회사들은 자바의 Connection 인터페이스의 추상메소드를 구체화 했다.
			Connection conn = DriverManager.getConnection("mysql");
			Connection conn = DriverManager.getConnection("oracle");
			Connection conn = DriverManager.getConnection("mariaDB");
			
			1. 추상메소드 : 
				.prepareStatement("SQL문법"); 		: 연동된 DB에 SQL문법 기재하고  prepareStatement 반환
			
		2. PreperedStatement (;준비된)
		    
		    1. 추상메소드 :
		         ps.setXXX(물음표 카드번호 ,대입값);       : SQL 문에 존재하는 ?(와일드카드)의 순번의 값을 대입, ?(와일드카드) 1번시작 , 타입을 일치
		             * SQL :insert into  memeber (mid, mpwd ,mname) values( ? , ? , ?);
		               ㄴ ps.set (? 번호,값);
		               ㄴ ps.setString(1,"qwe1234"); : SQL 존재하는 첫번째 ? 에 "qwe123" 값 대입
		               ㄴ ps.setString(2,"a1234"); : SQL 존재하는 첫번째 ? 에 "a1234" 값 대입
		               ㄴ ps.setString(3,"유재석"); : SQL 존재하는 첫번째 ? 에 "유재석" 값 대입
		                 -> insert into member(mid , mpwd , mname) values ("qwe1234","a1234","유재석");
		              
		         ps.excuteQuery();                  : select 기재된 SQL을 실행하고 , 처리된 레코드를 조작할 수 있는 ResultSet 반환
		         ps.excuteUpdate();                 : insert , update delete 기재된 SQL를 실행하고, 처리된 레코드 수 반환
		         
		3. ResultSet
		    1. 추상메소드 :
		         rs.next();                         : select 결과 조회된 레코드들 중에서 다음 레코드 이동 , 다음레코드가 있으면 true , 없으면 false 반환
		            * 레코드 : 행 /가로 단위 데이터들
		            * 만약에 레코드(행) 6개이면 next() 는 6번 실행이 가능하다
		            
		            while(rs.next()) 회원목록보기 , 게시물 전체조회
		            if(rs.next()) 아이디 찾기 , 비밀번호찾기 , 로그인 , 게시물 개별조회 (여러개 조회 : 설계의 문제 발생 , 
		         
		rs.getXXX("속성명") : 현재 ResultSet가 조회중인 레코드에서 속성값 반환
		* 속성명과 속성값의 차이? 
		속성명 : 값의 대표적인 이름 (ye)나이 / 속성값 : 값 (ye) 39
		ㄴ 변수명 / 변수값 , 속성명/속성값 , 멤버변수명/멤버변수값 , 필드명/필드값
		
		XXX: 속성명의 타입 , SQL int --> JAVA.getInt() , SQL varchear --> getString()
		
		
		
		
		
		
		
		
		
		
		=====================================================================================================================
		
		
		아래는 초등학생도 쉽게 이해할 수 있도록 설명과 주석을 단 자바 JDBC 서브노트 예시입니다. 
		💡 --- ## **JDBC란 무엇일까요?** - **JDBC**는 **J**ava **D**ata**B**ase **C**onnect의 약자예요.
		 간단히 말해, **자바 프로그램과 데이터베이스(DB)**를 연결해주는 다리 역할을 합니다! --- 
		 ### 1. **JDBC 라이브러리 준비하기** - **라이브러리**는 미리 만들어진 도구 상자라고 생각하면 돼요. 우리가 필요할 때 꺼내 쓸 수 있죠!
		  #### 1.1 **MySQL JDBC 라이브러리 다운로드**
		   1. [MySQL 다운로드 페이지](https://dev.mysql.com/downloads/connector/j/)로 이동합니다.
		    2. **Operating System**을 "Platform Independent"로 선택하세요. 3. ZIP 파일을 다운로드한 후, 압축을 풉니다. 
		    4. 압축 푼 폴더 안에 있는 **mysql-connector-j-9.1.0.jar** 파일을 확인하세요. - **.jar**는 자바 라이브러리 파일이에요. 
		    #### 1.2 **내 프로젝트에 JDBC 라이브러리 추가하기** 1. **mysql-connector-j-9.1.0.jar** 파일을 프로젝트로 옮기세요. - 예: 프로젝트 폴더 > `src/database` 폴더 
		    2. 해당 파일을 마우스 오른쪽 클릭 -> **Build Path** -> **Add to Build Path**를 선택하세요. 
		    --- ### 2. **DB 연결 코드 작성하기** #### 
		    2.1 **JDBC 드라이버 로드하기** ```java Class.forName("com.mysql.cj.jdbc.Driver"); 
		    ``` - **쉽게 말하면:** "Hey! MySQL을 사용할 거예요!" 라고 자바에게 알려주는 코드입니다. 
		    #### 2.2 **DB 서버에 연결하기** ```java Connection conn = DriverManager.getConnection( "jdbc:mysql://localhost:3306/db명", // DB 주소 "root", // 사용자 이름 "1234" // 비밀번호 ); 
		    ``` - **쉽게 말하면:** "자바야, 이 DB에 접속해줘!" 성공하면 `conn`이라는 이름표로 연결된 DB를 다룰 수 있어요! 
		    --- ### 3. **JDBC의 주요 인터페이스** #### 
		    **3.1 Connection 인터페이스** - DB 서버와 연결을 담당하는 친구예요.

		     - **예:** MySQL, Oracle, MariaDB 등 다양한 DB를 연결할 수 있어요. ```java Connection conn = DriverManager.getConnection("mysql"); ``` #### **3.2 PreparedStatement 인터페이스** - SQL 문법을 미리 준비해서 실행하는 친구예요. - **주요 메소드:** 1. `prepareStatement("SQL문법")`: SQL을 준비해요. 2. `ps.setXXX(물음표 번호, 값)`: SQL 문에서 **?**에 값을 넣어요. 3. `ps.executeQuery()`: SELECT 문을 실행해요. 4. `ps.executeUpdate()`: INSERT, UPDATE, DELETE 문을 실행해요. **예제 코드:** ```java PreparedStatement ps = conn.prepareStatement( "INSERT INTO member (mid, mpwd, mname) VALUES (?, ?, ?)" ); ps.setString(1, "qwe1234"); // 첫 번째 ?에 "qwe1234" 대입 ps.setString(2, "a1234"); // 두 번째 ?에 "a1234" 대입 ps.setString(3, "유재석"); // 세 번째 ?에 "유재석" 대입 ps.executeUpdate(); // SQL 실행 ``` --- ### 4. **ResultSet 인터페이스** - SELECT 결과를 다루는 친구예요. - **주요 메소드:** 1. `rs.next()`: 다음 데이터로 이동해요. 데이터가 있으면 `true`, 없으면 `false`를 반환해요. 2. `rs.getXXX("속성명")`: 현재 데이터의 값을 가져와요. **예제 코드:** ```java ResultSet rs = ps.executeQuery(); while (rs.next()) { System.out.println("이름: " + rs.getString("mname")); } ``` - **쉽게 말하면:** - `rs.next()`로 다음 줄로 이동해요. - `rs.getString("mname")`으로 현재 줄의 이름을 가져와요. --- ### 추가로 알아두면 좋은 용어 - **속성명**: 데이터의 이름 (예: 이름) - **속성값**: 데이터의 값 (예: 유재석) --- 이제 JDBC를 사용할 준비가 되었어요!
		
		
		
		
		
		
		
		