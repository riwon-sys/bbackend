[변수]
	- 변하는 수 
	- 값을 넣을 수 있는 빈 그릇과 같습니다.
	1. 변수 형태 
		자료형 변수명 = 리터럴;
	2. 변수 선언 
		1. 선언 : 자료형 변수명;
		2. 초기화 : 자료형 변수명 = 리터럴;
	3. 변수명 주의할점
		1. 숫자로 시작 불가능하다.
		2. 특수문자 _ 와 $ 사용 하고 띄어쓰기 불가능하다
		3. 키워드(예약어) : if for int 등등 불가능하다.
		* 카멜표기법 : 소문자로 시작하고 두번째 단어는 첫글자를 대문자 한다.
		numberofStudent -> numberOfStudent
		
	4. 변수의 값 호출
	변수명
	
	5.변수의 값 수정
	변수명 = 새로운값	

[리터럴]
   - 데이터 그 자체 , 키보드로 부터 입력한 자료
   - 자바 리터럴은 논리(boolean) 문자(char) 정수(int) 실수(double)


[자료형]
   - 타입 , 자료의 형식 , 자료를 분류하는 방법
   1. 목적 : 메모리를 저장범위를 고려하여 저장할 데이터에 적잡하게 선택하여 사용하므로 메모리의 효율성을 높일 수 있다.
   
   - 자바의 기본타입[ 8가지 ] (+ String은 클래스타입)
   
   	// 자료형 / 타입 / 분류 : 데이터를 나누는 방법
		
		 * 자바의 기본 타입 (기본자료형)
		          [키 워 드        용  량                          저 장 범 위]
		   [논리]  boolean        1바이트                     true 혹은 false
		   
		   [문자]   char          2바이트           유니코드 , 작은 따옴표를 이용한 문자 -> 'A'
		         String          N바이트          문자열클래스 , 큰따옴표를 이용한 감싼 문자열 -> "ABC"
		        
		   [정수]   byte          1바이트            - 128 ~ + 127 표현값 저장
		           short         2바이트            + - 32768 저장
		           int           4바이트           + - 21억 정도까지 저장 ,리터럴정수(키보드로 입력한 값은 정수) , 정수 기본타입
		           long          8바이트           + - 21억 그 이상 저장 , 리터럴 뒤에 L / l 븉아기.
		           
		   [실수]   float         4바이트           소수점 8자리까지 표현 , 실수 리터럴 뒤에 F/f 붙이기
		[부동소수점]  double        8바이트           소수점 17자리까지 표현 , 실수리터럴 , 실수중에 기본타입
		          
		          * 왜[타입목적] ?  타입을 여러가지 구분해서 범위에 맞게 사용 - > 메모리를 효율적으로 적절하게 선택하여 사용하자.[ 설 계 ]
		          
		 
[부동 소수점]
 * 0과 1사이의 실수는 끝없는 무한대 표현 가능하므로 , 컴퓨터 한계를 만들었다.
  -  지수부 : 숫자의 크기를 조종하는 역할  ex] 몇 승
  -  가수부 : 숫자의 유효 자릿수를 표현   ex] 숫자 자체
  float : 부호1비트 , 지수부8비트 , 가수부23비트
  double : 부호1비트 , 지수부11비트 , 가수부52비트
  ex] -6.25
    1. 2진수로 표현               : -110.01
	2. 부호 : 0(양수) 1(음수)      : 1
	        
  ex] 1000000
	가수 : 1, 지수 10의 6승(10을 6번 곱해야 함)
	- 실제 연산이 중요한 부분에 업무에서는 실수타입을 사용하는데 한계 (오차) , 해결법 :라이브러리 BigDecimal 또는 문자열 처리
[소수 자릿수를 이동하는 방법 ]  
100.0*10 : 1000
100.0/10 : 10 

[상수]
초기화 이후 변하지 않는 값 , final 키워드 사용 , 상수명은 대문자로 사용

[ 리터럴 ]
개발자가 키보드로부터 입력한 숫자,문자,논리 등등 일컫는 말
자바는 이러한 리터럴값들을 상수풀(메모리공간)이라는 곳에서 *상수로 저장 한다.

[타입변환]
// 1. 자동(자료/타입) 형 변환 , 묵시적 형 변환
		      // - 1. 메모리 크기가 작은 것 부터 큰 순으로 변환
		      // - 2. 데이터의 손실이 없다.
		      // - 3. 연산(계산) 중에 큰 값으로 변환된다. ( 메모리의 손실방지의 최소화 )
		      // byte - > short / char - > int - > long - > float - > double

 // + 연산 중에 묵시적 형 변환 , 연산시 피연산자중에 더 큰 타입으로 결과를 반환한다.
           // byte + byte 끼리 계산 할 경우 => int , int 이하 byte 와 short 는 연산 결과는 무조건 int 로 반환된다.
           // byte + short => int
           // int + int => int
           // int + long => long
           // int + float => float


 // 2. 자동 (자료/타입) 형 변환 , 명시적 (자료/타입)형 변환 , 캐스팅
            // - 1. 메모리의 크기가 큰것 부터 작은것 으로 변환
            // - 2. 데이터의 허용범위 외 손실이 발생 할 수 있다.
            // - 3. (변환 할 타입명) 변수명
            // - 4. double -> float -> long -> int ->short / char -> byte
            
            [ 타입변환 ]
	1. 자동 타입 변환 , 묵시적 형 변환 
		- 1.메모리 크기가 작은 것 부터 큰 순으로 변환
		- 2.데이터의 손실이 없다.
		- 3.연산(계산) 중에 큰 값으로 변환된다.( 메모리 손실 방지 )
		- byte -> short , char -> int -> long -> float -> double 
		+ 연산중에 묵시적 형변환  , 연산시 피연산자중에 더 큰 타입으로 결과를 반환한다.
			byte + byte => int	, 예외] byte와 short 연산 결과는 무조건 int로 반환된다.
			byte + short => int 	, 
			int + int => int 
			int + long => long 
			int + float => float 
			float + double => double 
			
	2. 강제 타입 변환 , 명시적 형 변환 , 캐스팅 
		- 1. 메모리 크기가 큰것 부터 작은 순으로 변환 
		- 2. 데이터의 (허용범위 외)손실이 있을수도 있다.
		- 3. (변환할타입명)변수명 , (변환할타입명)리터럴값
		- double -> float -> long -> int -> short , char -> byte
 