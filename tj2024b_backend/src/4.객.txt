[객체]
 - 의사나 행위가 미치는 대상
 - 사람, 자동차,건물
 - 주문,생산,관리
--->강사기준에서는 학생들이 객체
 --->학생기준에서는 강사가 객체
    
- 객(손님)체; 본인을 제외한 모든 대상

[객체지향 프로그래밍]
- 어떤 대상(객체)을 가지고 프로그래밍 한다.

[클래스기반]
- 객체의 속성과 기능을 코드로 구현한 것;
- 속성 : 대상의 본질적인 특성  * 멤버변수
- 기능 : 어떠한 역할과 작동/행위/이벤트 * 메소드( 멤버함수 )
- 클래스형태 :  class 클래스명{ 멤버변수; 메소드;}
ㄴ 클래스 이름 짓는 규칙 : 대문자로 시작한다.
* class는 객체를 만들기 위한 객체의 일종의 틀 ; 설계도 
- 클래스의 사용처
ㄴ 1. 객체 설계도 클래스 2. main함수를 갖는 실행 클래스

[예시]
(예1) 학생,
- 속성(멤버변수) : 학번,이름,학년,사는곳 등등
- 기능(메소드) : 공부하기,잠자기 ; 그 학생이 하고자 하는 행위
public class Student{
   int studentID;
   String studentName;
   int grade;
   String address;
}
(예2) 자동차,
- 속성(멤버변수) : 제조사,차량번호,색상,현재속도,엔진상태
- 기능(메소드) : 전진;엑셀레이터(속도증가),후진;파킹(속도감소),
public class Car{
   String 제조사;
   Stirng  차량번호;
   int 현재속도;
}
(예3) 주문,
- 속성(멤버변수) : 주문번호,주문제품명,주문수량,주문날짜
- 기능(메소드)
public class Order{
   String 주문번호;
   String 주문제품명;
   String 주문수량;
} 

// 생각해보기 : 생활속의 객체들을 클래스 코드로 표현하기
(단, 학생,자동차,주문 제외)
(예4)무인 택배 접수,
- 속성(멤버변수) : 예약접수번호,예약접수일자,예약수량
- 기능(메소드)
public class Uds{
   int 예약접수번호;
   int 예약접수일자;
   int 예약수량;
} 

[배열]
1.정의 : 자료형/타입 이 같은 자료 여러개를 한번에 관리하는 자료구조이다.
2.선언 : 
     타입[] 변수명 = new 타입 [길이];
     ㄴ 타입 : 배열에 저장할 자료들의 공통 타입
     ㄴ new : 객체/배열 생성하기 위한 키워드/예약어
     ㄴ [길이] : 배열에 저장할 자료의 최대 개수 * 고정길이 *
         ㄴ 주의할점 : 선언된 이후에 배열의 길이는 변경이 불가능하다.
3. 배열 초기화
   ㄴ1. 타입[] 변수명 = new 타입[]{ 값1 , 값2 , 값3 }
   ㄴ2. 타입[] 변수명 = { 값1 , 값2 , 값3 }
   ㄴ3. 타입[] 변수명; 
         변수명= new 타입[]{ 값1 , 값2 , 값3 }
4. 배열 요소의 기본값 : 배열 요소의 초기값이 없을때 자동으로 들어가는 값
정수는 0 , 실수는 0.0 , 객체는 null , 논리는 false

5. 배열 사용 : [] 대괄호
   ㄴ 인덱스 : 배열 내 요소 값이 저장된 순서번호, 인덱스는 0번부터 시작
    1. 배열 전체 호출
      ㄴ 배열변수명      * 배열 주소(메모리 위치)
    2. 배열 특정 요소 값 호출
      ㄴ 배열변수명[ 인덱스 ]

6. 배열의 길이 속성
   ㄴ 배열변수명.length

7. 배열과 반복문 관계
   ㄴ 배열은 인덱스라는 저장순서 번호가 규칙이 존재한다.
   ㄴ 인덱스의 규칙은 : 0번 부터 1씩 증가하면서, 마지막 요소까지 번호를 부여한다.
         ㄴ 배열의 마지막 인덱스를 구하는 방법 : 배열변수명.length -1
   ㄴ for( int index = 0; index <= 배열변수명.length -1 ; index ++){
            배열변수명[index]
           }

[ 메 소 드 ] 멤버함수 또는 메소드
   1. 정의 : 하나의 기능을 수행하는 일련의 코드 , 여러 코드(일종의 명령어;) 들을 묶음으로 저장 역할
   2. 함수 정의/만들기 
      ㄴ타입타입 함수명( 타입 매개변수1 , 타입 매개변수 2){   / 타입을 반드시 명시 해야함
             실행코드;
             return 반환값 | 반환값이 없으면 생략
         {
             ㄴ 1. 함수이름 : 변수명과 동일하게 임의 ,                    * 카멜표기법 권장
             ㄴ 2. 매개변수 : 함수의 입력으로 받는 변수
                  1. 매개변수는 없을 수도 있다
                  2. 함수 호출 / 사용시 인수 값을 대입 받는 변수
                  3. * 인수 값의 타입과 매개변수의 타입은 일치 해야한다. * ; int = int / string = string / char = char 
             ㄴ 3. 반환값  :  함수를 수행한 후 결과로 되돌려 주는 값  * 매개변수는 없을 수도 있다  ; 반환타입 void *
                   - retrun : 1. 반환값 되돌려 주는 역할 2. 함수 종료하는 역할
                   1. 반환 값이 없을 수도 있다 : 반환타입 void
                   2. 반환 값의 타입과 반환타입은 일치해야한다.  * ; int = int / string = string / char = char 
  3. 함수 호출 
		 [1] 호출하고자 하는 함수가 같은 클래스에서 선언
		 	함수명();
		 	
		 [2] 호출하고자 하는 함수가 다른 클래스에서 선언 
		 	* 객체 필요
		 	1. 클래스 변수명 = new 생성자();
		 	2. 변수.함수명();

    * 참고 : 자바에서 오류가 발생했을때 대처 방법
     ㄴ 일단 실행 > 콘솔 오류 메시지 확인 > 구글링
   * 참고 : 자바의 이름 짓기 규약
   - 패키지 / 폴더명은 모두 소문자
   - 클래스명은 첫글자 대문자 
   - 변수 / 함수명은 첫글자를 소문자로 시작 , 중간에 새단어의 첫글자는 대문자
      ㄴ 카멜 표기법을 사용
   - 객체명 / 배열명 : 존재하지 않음
      ㄴ 타입 변수명 = 객체       * 관례 : 객체를 참조하는 변수; 객체변수
      ㄴ 타입[ ] 변수명 = 배열    * 관례 : 배열을 참조하는 변수; 배열변수
   * 참고 : 용어 정리
      ㄴ 1. 객체 ? object , 물리적인 개념과 논리적인 개념을 가진 대상 / 물체 , * 나를 제외한 어떤 고유한 성질과 행위를 가진 대상 *
               - 객체 지향 프로그램의 대상 , 생성된 인스턴스
      ㄴ 2. 클래스 ? class , 대상 / 물체 분류 , * 자바에서 객체를 만들기위해서 설계한 코드 *
               - 객체를 프로그래밍하기 위해 코드로 만든 상태
      ㄴ 3. 인스턴스 ? instance , 대상 /물체를 발의 ,  * new 연산자로 만들어진 객체 *
               - 클래스가 메모리에 생성된 상태
      ㄴ 4. 멤버변수 ? 어떤 특정한 곳에서 구성된 변수 , * 인스턴스(객체) 내 할당된 변수 *
               - 클래의 속성 , 특성
      ㄴ 5. 멤버함수(메소드) ? 어떤 특정한 곳에서 구성된 함수 , * 인스턴스(객체)가 사용하는 함수 *
               - 멤버 변수를 이용하여 클래스 의 기능을 구현
      ㄴ 6. 참조변수 ? reference , 어떤 무엇인가를 알기 위해서 다른 것을 견주어 살펴보다 ,  * 인스턴스(객체)의 위치(주소)를 갖는 변수 *
               - 메모리에 생성된 인스턴스를 가리키는 변수
      ㄴ 7. 참조값 ? 실제 reference , * 인스턴스(객체)의 위치 *
               - 생성된 인스턴스의 메모리 주소 값